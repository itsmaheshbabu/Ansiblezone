--- 
- name: Install tomcat 9
  hosts: webserver
  become: yes
  tasks:
    - name: fail on unsupported versions
      fail:
        msg: This playbook supports only Ubuntu 18 and CentOS 7 distributions
      when:
        - ansible_facts['distribution'] != "Ubuntu"
        - ansible_facts['distribution'] != "CentOS"
        - (ansible_facts['distribution'] == "Ubuntu" and ansible_facts['major_distribution_version'] != "18")
        - (ansible_facts['distribution'] == "CentOS" and ansible_facts['major_distribution_version'] != "7")
    - name: install java
      package:
        name: "{{ java_package }}"
        update_cache: yes
        state: present
    - name: Ensure the group tomcat exists
      group:
        name: "{{ tomcat_group }}"
        state: present 
    - name: Ensure tomcat home directory exists
      file:
        path: "{{ tomcat_home_dir}}"
        state: directory
    - name: Ensure the user tomcat exists
      user:
        name: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        shell: "{{ tomcat_shell }}"
    - name: Download tomcat
      get_url:
        url: "{{ tomcat_url }}"
        dest: "{{ tomcat_download_dest }}"
    - name: check if the tomcat is extracted
      stat:
        path: "{{ tomcat_check_dir }}"
      register: tomcat_conf
    - name: untar the tomcat
      command:
        cmd: "tar xzvf {{ tomcat_download_dest }} -C {{ tomcat_home_dir }} --strip-components=1"
      when: not tomcat_conf.stat.exists
    - name: update group permissions for tomcat directory
      file:
        path: "{{ tomcat_home_dir }}"
        owner: "{{ tomcat_group }}"
        group: "{{ tomcat_group }}"
        recurse: yes
        state: directory
    - name: update group permissions for conf directory
      file:
        path: "{{ tomcat_check_dir }}"
        mode: u=rwx,g=rx
        state: directory
    - name: update recursive ownership for tomcat
      file:
        path: "{{ item }}"
        owner: "{{ tomcat_group }}"
        group: "{{ tomcat_group }}"
        recurse: yes
        state: directory
      loop: "{{ tomcat_directories_for_group_permissions }}"
    - name: copy the tomcat service 
      template:
        src: tomcat.service.j2
        dest: "{{tomcat_service_file}}"
      notify:
        - reload daemon
    - name: enable and start tomcat service
      service:
        name: tomcat.service
        enabled: yes
        state: started
  handlers:
    - name: reload daemon
      systemd:
        name: tomcat.service
        daemon_reload: yes
        state: started

      


